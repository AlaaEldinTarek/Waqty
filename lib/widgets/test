// main.dart
import 'package:flutter/material.dart';
import 'home.dart';
import 'addTaskPage.dart';
import 'package:flutter_localizations/flutter_localizations.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'وقتي',
      theme: ThemeData(
        primarySwatch: Colors.indigo,
        fontFamily: 'Cairo',
      ),
      locale: const Locale('ar'),
      supportedLocales: const [
        Locale('ar'),
      ],
      localizationsDelegates: const [
        GlobalMaterialLocalizations.delegate,
        GlobalWidgetsLocalizations.delegate,
        GlobalCupertinoLocalizations.delegate,
      ],
      home: const HomeWithTasks(),
    );
  }
}

class HomeWithTasks extends StatefulWidget {
  const HomeWithTasks({super.key});

  @override
  State<HomeWithTasks> createState() => _HomeWithTasksState();
}

class _HomeWithTasksState extends State<HomeWithTasks> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: const HomeScreen(),
      floatingActionButton: FloatingActionButton(
        onPressed: () async {
          final result = await Navigator.push(
            context,
            MaterialPageRoute(builder: (_) => AddTaskPage(customGroups: [])),
          );
          if (result == true) {
            setState(() {}); // إعادة تحميل المهام بعد الإضافة
          }
        },
        child: const Icon(Icons.add),
      ),
    );
  }
}


// في ملف storgeHelper.dart

import 'package:shared_preferences/shared_preferences.dart';
import 'dart:convert';

class StorageHelper {
  static Future<void> init() async {
    // أي تهيئة لازمة
  }

  static Future<void> addTask(Map<String, dynamic> task) async {
    final prefs = await SharedPreferences.getInstance();
    List<String> tasks = prefs.getStringList('tasks') ?? [];
    tasks.add(jsonEncode(task));
    await prefs.setStringList('tasks', tasks);
  }

  static Future<List<Map<String, dynamic>>> loadTasks() async {
    final prefs = await SharedPreferences.getInstance();
    List<String> tasks = prefs.getStringList('tasks') ?? [];
    return tasks.map((e) => jsonDecode(e) as Map<String, dynamic>).toList();
  }

  static Future<void> addArchivedTask(Map<String, dynamic> task) async {
    final prefs = await SharedPreferences.getInstance();
    List<String> archived = prefs.getStringList('archivedTasks') ?? [];
    archived.add(jsonEncode(task));
    await prefs.setStringList('archivedTasks', archived);
  }

  static Future<List<Map<String, dynamic>>> loadArchivedTasks() async {
    final prefs = await SharedPreferences.getInstance();
    List<String> archived = prefs.getStringList('archivedTasks') ?? [];
    return archived.map((e) => jsonDecode(e) as Map<String, dynamic>).toList();
  }
}



import 'package:flutter/material.dart';
import 'package:waqti/gruop_select.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:convert';
import 'package:intl/intl.dart';
import 'package:waqti/storgeHelper.dart';

class AddTaskPage extends StatefulWidget {
  final List<Map<String, dynamic>> customGroups;

  const AddTaskPage({Key? key, required this.customGroups}) : super(key: key);

  @override
  State<AddTaskPage> createState() => _AddTaskPageState();
}

class _AddTaskPageState extends State<AddTaskPage> {
  final controllerTitle = TextEditingController();
  final controllerDetails = TextEditingController();
  DateTime? selectedTime;
  String? selectedGroup;
  List<Map<String, dynamic>> customGroups = [];
  Duration reminderDuration = const Duration(minutes: 5);
  String repeat = 'يومي';
  final _formKey = GlobalKey<FormState>();

  @override
  void initState() {
    super.initState();
    _loadGroups();
  }

  Future<void> _loadGroups() async {
    final prefs = await SharedPreferences.getInstance();
    final savedGroups = prefs.getString('customGroups');
    if (savedGroups != null) {
      final decoded = jsonDecode(savedGroups);
      setState(() => customGroups = List<Map<String, dynamic>>.from(decoded));
    } else {
      customGroups = [
        {'name': 'العمل', 'color': Colors.blue.value},
        {'name': 'الدراسة', 'color': Colors.orange.value},
      ];
    }
  }

  Future<void> _saveGroups() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString('customGroups', jsonEncode(customGroups));
  }

  void _handleGroupAdded(String name, Color color) {
    setState(() {
      customGroups.add({'name': name, 'color': color.value});
    });
    _saveGroups();
  }

  void _handleGroupEdited(String oldName, String newName, Color newColor) {
    setState(() {
      final index = customGroups.indexWhere((g) => g['name'] == oldName);
      if (index != -1) {
        customGroups[index] = {'name': newName, 'color': newColor.value};
      }
    });
    _saveGroups();
  }

  void _handleGroupDeleted(String groupName) {
    setState(() {
      customGroups.removeWhere((g) => g['name'] == groupName);
      if (selectedGroup == groupName) selectedGroup = null;
    });
    _saveGroups();
  }

  void _handleGroupSelected(String groupName) {
    setState(() => selectedGroup = groupName);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('إضافة مهمة')),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: ListView(
          children: [
            TextField(
              controller: controllerTitle,
              decoration: const InputDecoration(labelText: 'العنوان'),
            ),
            TextField(
              controller: controllerDetails,
              decoration: const InputDecoration(labelText: 'التفاصيل'),
            ),
            const SizedBox(height: 16),
            GroupSelector(
              customGroups: customGroups,
              onGroupAdded: _handleGroupAdded,
              onGroupEdited: _handleGroupEdited,
              onGroupDeleted: _handleGroupDeleted,
              onGroupSelected: _handleGroupSelected,
              selectedGroup: selectedGroup ?? '',
            ),
            const SizedBox(height: 16),
            Row(
              children: [
                Text(
                  selectedTime == null
                      ? 'اختر وقت و تاريخ البدء'
                      : DateFormat('yyyy/MM/dd – HH:mm').format(selectedTime!),
                ),
                const Spacer(),
                ElevatedButton(
                  onPressed: () async {
                    final picked = await showDatePicker(
                      context: context,
                      initialDate: DateTime.now(),
                      firstDate: DateTime.now(),
                      lastDate: DateTime(2100),
                    );
                    if (picked != null) {
                      final time = await showTimePicker(
                        context: context,
                        initialTime: TimeOfDay.now(),
                      );
                      if (time != null) {
                        setState(() {
                          selectedTime = DateTime(picked.year, picked.month,
                              picked.day, time.hour, time.minute);
                        });
                      }
                    }
                  },
                  child: const Text('اختر'),
                ),
              ],
            ),
            const SizedBox(height: 10),
            Row(
              children: [
                const Text('تذكير قبل المهمة بـ'),
                const SizedBox(width: 10),
                DropdownButton<Duration>(
                  value: reminderDuration,
                  onChanged: (value) =>
                      setState(() => reminderDuration = value!),
                  items: const [
                    Duration(minutes: 5),
                    Duration(minutes: 10),
                    Duration(minutes: 30),
                    Duration(hours: 1),
                    Duration(hours: 2),
                  ]
                      .map((d) => DropdownMenuItem(
                            value: d,
                            child: Text(d.inMinutes >= 60
                                ? '${d.inHours} ساعة'
                                : '${d.inMinutes} دقيقة'),
                          ))
                      .toList(),
                ),
              ],
            ),
            const SizedBox(height: 10),
            DropdownButtonFormField<String>(
              value: repeat,
              items: ['يومي', 'يوم ويوم', 'أسبوعي', 'شهري']
                  .map((e) => DropdownMenuItem(value: e, child: Text(e)))
                  .toList(),
              onChanged: (val) => setState(() => repeat = val!),
              decoration: const InputDecoration(labelText: 'تكرار المهمة'),
            ),
            const SizedBox(height: 20),
            Center(
              child: ElevatedButton(
                onPressed: () async {
                  if (_formKey.currentState!.validate() &&
                      selectedTime != null &&
                      selectedGroup != null &&
                      repeat != null &&
                      reminderDuration != null) {
                    final newTask = {
                      'title': controllerTitle.text,
                      'details': controllerDetails.text,
                      'time': selectedTime!.toIso8601String(),
                      'group': selectedGroup,
                      'repeat': repeat,
                      'reminder': reminderDuration!.inMinutes,
                    };
                    await StorageHelper.addTask(newTask);
                    Navigator.pop(context, true);
                  } else {
                    ScaffoldMessenger.of(context).showSnackBar(
                      const SnackBar(
                          content: Text('من فضلك، أكمل كل الحقول المطلوبة')),
                    );
                  }
                },
                child: const Text('إضافة المهمة'),
              ),
            ),
          ],
        ),
      ),
    );
  }
}



import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'storgeHelper.dart';

class AddTaskPage extends StatefulWidget {
  const AddTaskPage({super.key});

  @override
  State<AddTaskPage> createState() => _AddTaskPageState();
}

class _AddTaskPageState extends State<AddTaskPage> {
  final _formKey = GlobalKey<FormState>();
  final TextEditingController controllerTitle = TextEditingController();
  final TextEditingController controllerDetails = TextEditingController();

  DateTime? selectedTime;
  Map<String, dynamic>? selectedGroup;
  String repeat = 'لا يتكرر';
  Duration reminderDuration = const Duration(minutes: 5);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('إضافة مهمة')),
      body: Form(
        key: _formKey,
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: ListView(
            children: [
              TextFormField(
                controller: controllerTitle,
                decoration: const InputDecoration(labelText: 'العنوان'),
                validator: (value) =>
                    value == null || value.isEmpty ? 'أدخل عنوان المهمة' : null,
              ),
              const SizedBox(height: 12),
              TextFormField(
                controller: controllerDetails,
                decoration: const InputDecoration(labelText: 'تفاصيل المهمة'),
              ),
              const SizedBox(height: 12),
              ListTile(
                title: const Text('اختيار الوقت'),
                subtitle: Text(selectedTime != null
                    ? DateFormat('yyyy/MM/dd – HH:mm').format(selectedTime!)
                    : 'لم يتم التحديد بعد'),
                trailing: IconButton(
                  icon: const Icon(Icons.access_time),
                  onPressed: () async {
                    final picked = await showDatePicker(
                      context: context,
                      initialDate: DateTime.now(),
                      firstDate: DateTime(2020),
                      lastDate: DateTime(2100),
                    );
                    if (picked != null) {
                      final time = await showTimePicker(
                        context: context,
                        initialTime: TimeOfDay.now(),
                      );
                      if (time != null) {
                        setState(() {
                          selectedTime = DateTime(picked.year, picked.month, picked.day, time.hour, time.minute);
                        });
                      }
                    }
                  },
                ),
              ),
              const SizedBox(height: 12),
              DropdownButtonFormField<String>(
                value: repeat,
                items: ['لا يتكرر', 'يوميًا', 'يوم ويوم', 'أسبوعيًا', 'شهريًا']
                    .map((e) => DropdownMenuItem(value: e, child: Text(e)))
                    .toList(),
                onChanged: (value) {
                  if (value != null) setState(() => repeat = value);
                },
                decoration: const InputDecoration(labelText: 'تكرار المهمة'),
              ),
              const SizedBox(height: 12),
              DropdownButtonFormField<Duration>(
                value: reminderDuration,
                items: [
                  const Duration(minutes: 5),
                  const Duration(minutes: 10),
                  const Duration(minutes: 30),
                  const Duration(minutes: 60)
                ]
                    .map((d) => DropdownMenuItem(
                          value: d,
                          child: Text('قبل ${d.inMinutes} دقيقة'),
                        ))
                    .toList(),
                onChanged: (val) {
                  if (val != null) setState(() => reminderDuration = val);
                },
                decoration: const InputDecoration(labelText: 'التذكير'),
              ),
              const SizedBox(height: 12),
              ElevatedButton(
                onPressed: () async {
                  if (_formKey.currentState!.validate() &&
                      selectedTime != null &&
                      selectedGroup != null &&
                      selectedGroup!['name'] != null) {
                    final newTask = {
                      'title': controllerTitle.text,
                      'details': controllerDetails.text,
                      'time': selectedTime!.toIso8601String(),
                      'group': {
                        'name': selectedGroup!['name'],
                        'color': selectedGroup!['color'] is Color
                            ? (selectedGroup!['color'] as Color).value
                            : selectedGroup!['color'],
                      },
                      'repeat': repeat,
                      'reminder': reminderDuration.inMinutes,
                    };
                    await StorageHelper.addTask(newTask);
                    Navigator.pop(context, true);
                  } else {
                    ScaffoldMessenger.of(context).showSnackBar(
                      const SnackBar(content: Text('أكمل كل الحقول المطلوبة')),
                    );
                  }
                },
                child: const Text('إضافة المهمة'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}



import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'storgeHelper.dart';
import 'group_select.dart';

class AddTaskPage extends StatefulWidget {
  const AddTaskPage({super.key});

  @override
  State<AddTaskPage> createState() => _AddTaskPageState();
}

class _AddTaskPageState extends State<AddTaskPage> {
  final _formKey = GlobalKey<FormState>();
  final TextEditingController controllerTitle = TextEditingController();
  final TextEditingController controllerDetails = TextEditingController();

  DateTime? selectedTime;
  String selectedGroup = 'شخصي';
  List<Map<String, dynamic>> customGroups = [];
  String repeat = 'لا يتكرر';
  Duration reminderDuration = const Duration(minutes: 5);

  @override
  void initState() {
    super.initState();
    loadCustomGroups();
  }

  Future<void> loadCustomGroups() async {
    final groups = await StorageHelper.loadGroups();
    setState(() {
      customGroups = groups;
    });
  }

  Future<void> saveCustomGroups() async {
    await StorageHelper.saveGroups(customGroups);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('إضافة مهمة')),
      body: Form(
        key: _formKey,
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: ListView(
            children: [
              TextFormField(
                controller: controllerTitle,
                decoration: const InputDecoration(labelText: 'العنوان'),
                validator: (value) =>
                    value == null || value.isEmpty ? 'أدخل عنوان المهمة' : null,
              ),
              const SizedBox(height: 12),
              TextFormField(
                controller: controllerDetails,
                decoration: const InputDecoration(labelText: 'تفاصيل المهمة'),
              ),
              const SizedBox(height: 12),
              ListTile(
                title: const Text('اختيار الوقت'),
                subtitle: Text(selectedTime != null
                    ? DateFormat('yyyy/MM/dd – HH:mm').format(selectedTime!)
                    : 'لم يتم التحديد بعد'),
                trailing: IconButton(
                  icon: const Icon(Icons.access_time),
                  onPressed: () async {
                    final picked = await showDatePicker(
                      context: context,
                      initialDate: DateTime.now(),
                      firstDate: DateTime(2020),
                      lastDate: DateTime(2100),
                    );
                    if (picked != null) {
                      final time = await showTimePicker(
                        context: context,
                        initialTime: TimeOfDay.now(),
                      );
                      if (time != null) {
                        setState(() {
                          selectedTime = DateTime(picked.year, picked.month,
                              picked.day, time.hour, time.minute);
                        });
                      }
                    }
                  },
                ),
              ),
              const SizedBox(height: 12),
              GroupSelector(
                customGroups: customGroups,
                selectedGroup: selectedGroup,
                onGroupAdded: (name, color) async {
                  setState(() {
                    customGroups.add({'name': name, 'color': color});
                  });
                  await saveCustomGroups();
                },
                onGroupEdited: (oldName, newName, newColor) async {
                  setState(() {
                    final index =
                        customGroups.indexWhere((g) => g['name'] == oldName);
                    if (index != -1) {
                      customGroups[index] = {
                        'name': newName,
                        'color': newColor
                      };
                    }
                    if (selectedGroup == oldName) {
                      selectedGroup = newName;
                    }
                  });
                  await saveCustomGroups();
                },
                onGroupDeleted: (groupName) async {
                  setState(() {
                    customGroups.removeWhere((g) => g['name'] == groupName);
                    if (selectedGroup == groupName) {
                      selectedGroup = 'شخصي';
                    }
                  });
                  await saveCustomGroups();
                },
                onGroupSelected: (selectedName) {
                  setState(() {
                    selectedGroup = selectedName;
                  });
                },
              ),
              const SizedBox(height: 12),
              DropdownButtonFormField<String>(
                value: repeat,
                items: ['لا يتكرر', 'يوميًا', 'يوم ويوم', 'أسبوعيًا', 'شهريًا']
                    .map((e) => DropdownMenuItem(value: e, child: Text(e)))
                    .toList(),
                onChanged: (value) {
                  if (value != null) setState(() => repeat = value);
                },
                decoration: const InputDecoration(labelText: 'تكرار المهمة'),
              ),
              const SizedBox(height: 12),
              DropdownButtonFormField<Duration>(
                value: reminderDuration,
                items: [
                  const Duration(minutes: 5),
                  const Duration(minutes: 10),
                  const Duration(minutes: 30),
                  const Duration(minutes: 60)
                ]
                    .map((d) => DropdownMenuItem(
                          value: d,
                          child: Text('قبل ${d.inMinutes} دقيقة'),
                        ))
                    .toList(),
                onChanged: (val) {
                  if (val != null) setState(() => reminderDuration = val);
                },
                decoration: const InputDecoration(labelText: 'التذكير'),
              ),
              const SizedBox(height: 12),
              ElevatedButton(
                onPressed: () async {
                  if (_formKey.currentState!.validate() &&
                      selectedTime != null &&
                      selectedGroup.isNotEmpty) {
                    final newTask = {
                      'title': controllerTitle.text,
                      'details': controllerDetails.text,
                      'time': selectedTime!.toIso8601String(),
                      'group': selectedGroup,
                      'repeat': repeat,
                      'reminder': reminderDuration.inMinutes,
                    };
                    await StorageHelper.addTask(newTask);
                    Navigator.pop(context, true);
                  } else {
                    ScaffoldMessenger.of(context).showSnackBar(
                      const SnackBar(content: Text('أكمل كل الحقول المطلوبة')),
                    );
                  }
                },
                child: const Text('إضافة المهمة'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// مشروع "وقتي" - نقطة البداية

import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:intl/intl.dart';
import 'models/task_model.dart';
import 'screens/home_screen.dart';
import 'screens/splash_screen.dart';

void main() {
  runApp(const WagtyApp());
}

class WagtyApp extends StatelessWidget {
  const WagtyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'وقتي',
      theme: ThemeData(
        useMaterial3: true,
        fontFamily: GoogleFonts.cairo().fontFamily,
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.blueAccent),
      ),
      home: const SplashScreen(),
    );
  }
}
